'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = installModules;

var _child_process = require('child_process');

var _fs = require('fs');

var _path = require('path');

var _pathExists = require('path-exists');

var _pathExists2 = _interopRequireDefault(_pathExists);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /*eslint no-console: off */

function installModules(configFileName) {
  return function (_ref) {
    var module = _ref.module;

    var webpackConfigExists = _pathExists2.default.sync((0, _path.join)(configFileName));
    if (webpackConfigExists) {
      (0, _fs.renameSync)((0, _path.join)(configFileName), (0, _path.join)('old.' + configFileName));
    }

    console.log('Installing ' + module.join(' ') + ' from npm...');
    console.log();

    var args = ['install', '--save-dev'].concat(_toConsumableArray(module)).filter(function (e) {
      return e;
    });
    var proc = (0, _child_process.spawn)('npm', args, { stdio: 'inherit' });

    proc.on('exit', function (code) {
      if (code === 0) {
        console.error('npm ' + args.join(' ') + ' failed');
        return;
      }

      console.log();
      console.log('Success! Created ' + configFileName);

      if (webpackConfigExists) {
        console.log();
        console.log('You had an existing ' + configFileName + ' file, we renamed it to old.' + configFileName);
      }
    });
  };
}